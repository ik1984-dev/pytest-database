
import pytest
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool

from app.main import app, get_db
from app.models import Base
from app.schemas import UserCreate

# üß™ –ù–ê–°–¢–†–û–ô–ö–ê –¢–ï–°–¢–û–í–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•
# SQLite in-memory –±–∞–∑–∞ - —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
SQLALCHEMY_DATABASE_URL = "sqlite:///:memory:"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤
engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    connect_args={"check_same_thread": False},  # –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    poolclass=StaticPool,  # –ü—Ä–æ—Å—Ç–æ–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–Ω–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
)

# –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


# üéØ –§–ò–ö–°–¢–£–†–´ PYTEST
# –§–∏–∫—Å—Ç—É—Ä–∞ - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
# scope="function" - —Ñ–∏–∫—Å—Ç—É—Ä–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞

@pytest.fixture(scope="function")
def db_session():
    """
    –§–∏–∫—Å—Ç—É—Ä–∞: —Å–æ–∑–¥–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    - –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    - –£–¥–∞–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    - –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–∑–æ–ª—è—Ü–∏—é —Ç–µ—Å—Ç–æ–≤
    """
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î...")

    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    Base.metadata.create_all(bind=engine)

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    session = TestingSessionLocal()

    try:
        # yield —Ä–∞–∑–¥–µ–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ "–¥–æ —Ç–µ—Å—Ç–∞" –∏ "–ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞"
        # –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∞–º —Ç–µ—Å—Ç
        yield session
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ—Å—Ç —É–ø–∞–ª)
        session.close()
        Base.metadata.drop_all(bind=engine)  # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        print("üîÑ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î...")


@pytest.fixture(scope="function")
def client(db_session):
    """
    –§–∏–∫—Å—Ç—É—Ä–∞: —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ FastAPI —Å –ø–æ–¥–º–µ–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    - –ó–∞–º–µ–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ë–î –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é
    - –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    - –û—á–∏—â–∞–µ—Ç –ø–æ–¥–º–µ–Ω—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    """

    def override_get_db():
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–º–µ–Ω—ã —Ä–µ–∞–ª—å–Ω–æ–π –ë–î –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é"""
        try:
            yield db_session
        finally:
            pass

    # üîÑ –ü–û–î–ú–ï–ù–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
    # –ó–∞–º–µ–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–µ
    app.dependency_overrides[get_db] = override_get_db

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FastAPI
    client = TestClient(app)

    # –û—Ç–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–µ—Å—Ç—É
    yield client

    # –û—á–∏—â–∞–µ–º –ø–æ–¥–º–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    app.dependency_overrides.clear()


# üß™ –¢–ï–°–¢–´ –î–õ–Ø API –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
class TestUserManagementAPI:
    """üìã –¢–µ—Å—Ç—ã –¥–ª—è API —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""

    def test_root_endpoint(self, client):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print("üß™ –¢–µ—Å—Ç: –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        response = client.get("/")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (200 OK - —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        assert response.status_code == 200, "–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 200"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        assert "message" in response.json(), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'message'"
        assert "User Management API is running" in response.json()["message"]

        print("‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_create_user_success(self, client, db_session):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏"""
        print("üß™ –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π)")

        user_data = {
            "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
            "email": "ivan@example.com",
            "bio": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ –ú–æ—Å–∫–≤—ã"
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = client.post("/users/", json=user_data)

        # 201 Created - —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
        assert response.status_code == 201, "–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 201 (Created)"

        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞
        assert data["name"] == user_data["name"], "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert data["email"] == user_data["email"], "Email –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert data["bio"] == user_data["bio"], "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert "id" in data, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        assert isinstance(data["id"], int), "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º"

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID={data['id']}, Email={data['email']}")

    def test_create_user_minimal_data(self, client, db_session):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
        print("üß™ –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")

        user_data = {
            "name": "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
            "email": "anna@example.com"
            # bio –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ)
        }

        response = client.post("/users/", json=user_data)

        assert response.status_code == 201
        data = response.json()

        assert data["name"] == user_data["name"]
        assert data["email"] == user_data["email"]
        assert data["bio"] is None, "Bio –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"

        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    def test_create_user_duplicate_email(self, client, db_session):
        """‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è email"""
        print("üß™ –¢–µ—Å—Ç: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è email")

        user_data = {
            "name": "–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤",
            "email": "petr@example.com",
            "bio": "–ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        }

        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º
        response1 = client.post("/users/", json=user_data)
        assert response1.status_code == 201
        print(f"‚úÖ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {response1.json()['email']}")

        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ email - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
        response2 = client.post("/users/", json=user_data)

        # 400 Bad Request - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥—É–±–ª–∏–∫–∞—Ç email)
        assert response2.status_code == 400, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ 400"
        assert "detail" in response2.json(), "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'detail'"
        assert "already registered" in response2.json()["detail"].lower()

        print("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏–π email –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

    def test_create_user_invalid_email(self, client, db_session):
        """‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ email"""
        print("üß™ –¢–µ—Å—Ç: –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ email")

        user_data = {
            "name": "–¢–µ—Å—Ç User",
            "email": "invalid-email-format",  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email
            "bio": "–¢–µ—Å—Ç–æ–≤–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è"
        }

        response = client.post("/users/", json=user_data)

        # 422 Unprocessable Entity - –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        assert response.status_code == 422, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ 422"
        print("‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

    def test_create_user_missing_required_fields(self, client, db_session):
        """‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π"""
        print("üß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π")

        # –¢–µ—Å—Ç –±–µ–∑ –∏–º–µ–Ω–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
        user_data_no_name = {
            "email": "noname@example.com",
            "bio": "–ë–µ–∑ –∏–º–µ–Ω–∏"
        }
        response = client.post("/users/", json=user_data_no_name)
        assert response.status_code == 422, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –±–µ–∑ –∏–º–µ–Ω–∏"
        print("‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

        # –¢–µ—Å—Ç –±–µ–∑ email (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
        user_data_no_email = {
            "name": "–ë–µ–∑ Email",
            "bio": "–ë–µ–∑ email"
        }
        response = client.post("/users/", json=user_data_no_email)
        assert response.status_code == 422, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –±–µ–∑ email"
        print("‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ email –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    def test_get_users_empty_list(self, client, db_session):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("üß™ –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        response = client.get("/users/")

        assert response.status_code == 200
        assert response.json() == [], "–°–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        print("‚úÖ –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–≤—Ä–∞—â–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_get_users_with_data(self, client, db_session):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏"""
        print("üß™ –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        test_users = [
            {"name": "User One", "email": "user1@example.com", "bio": "Bio 1"},
            {"name": "User Two", "email": "user2@example.com", "bio": "Bio 2"},
            {"name": "User Three", "email": "user3@example.com", "bio": "Bio 3"},
        ]

        created_users = []
        for user_data in test_users:
            response = client.post("/users/", json=user_data)
            assert response.status_code == 201
            created_users.append(response.json())

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_users)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        response = client.get("/users/")
        assert response.status_code == 200
        users = response.json()

        assert len(users) == len(test_users), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in users:
            assert "id" in user
            assert "name" in user
            assert "email" in user
            assert "bio" in user

        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def test_get_users_pagination(self, client, db_session):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("üß™ –¢–µ—Å—Ç: –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –°–æ–∑–¥–∞–µ–º 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i in range(5):
            user_data = {
                "name": f"User {i}",
                "email": f"user{i}@example.com",
                "bio": f"Bio {i}"
            }
            client.post("/users/", json=user_data)

        # üìä –¢–ï–°–¢–ò–†–£–ï–ú –ü–ê–ì–ò–ù–ê–¶–ò–Æ
        # skip=1 - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # limit=2 - –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = client.get("/users/?skip=1&limit=2")
        assert response.status_code == 200
        users = response.json()

        assert len(users) == 2, "–î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        assert users[0]["name"] == "User 1"
        assert users[1]["name"] == "User 2"

        print("‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_get_user_by_id_success(self, client, db_session):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
        print("üß™ –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID")

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "name": "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤",
            "email": "alexey@example.com",
            "bio": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ ID"
        }

        create_response = client.post("/users/", json=user_data)
        user_id = create_response.json()["id"]
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        response = client.get(f"/users/{user_id}")

        assert response.status_code == 200
        data = response.json()

        assert data["id"] == user_id
        assert data["name"] == user_data["name"]
        assert data["email"] == user_data["email"]
        assert data["bio"] == user_data["bio"]

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–∞–π–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    def test_get_user_by_id_not_found(self, client, db_session):
        """‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üß™ –¢–µ—Å—Ç: –ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID
        response = client.get("/users/99999")

        # 404 Not Found - —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
        assert response.status_code == 404
        assert "detail" in response.json()
        assert "not found" in response.json()["detail"].lower()

        print("‚úÖ –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

    def test_user_data_types(self, client, db_session):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""
        print("üß™ –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö")

        user_data = {
            "name": "Type Test User",
            "email": "types@example.com",
            "bio": "Testing data types"
        }

        response = client.post("/users/", json=user_data)
        data = response.json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        assert isinstance(data["id"], int), "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å integer"
        assert isinstance(data["name"], str), "Name –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å string"
        assert isinstance(data["email"], str), "Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å string"
        assert isinstance(data["bio"], str), "Bio –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å string"

        print("‚úÖ –í—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")


# üîß –¢–ï–°–¢–´ –î–õ–Ø –ù–ò–ó–ö–û–£–†–û–í–ù–ï–í–´–• CRUD –û–ü–ï–†–ê–¶–ò–ô
class TestCRUDOperations:
    """üîß –¢–µ—Å—Ç—ã –¥–ª—è –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""

    def test_crud_create_and_retrieve(self, db_session):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CRUD"""
        print("üß™ –¢–µ—Å—Ç: CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–∏—Å–∫")

        from app.crud import create_user, get_user_by_email, get_user_by_id
        from app.schemas import UserCreate

        user_data = UserCreate(
            name="CRUD Test User",
            email="crud@example.com",
            bio="Testing CRUD operations"
        )

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CRUD
        created_user = create_user(db_session, user_data)
        assert created_user is not None
        assert created_user.id is not None
        print(f"‚úÖ CRUD: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID {created_user.id}")

        # –ò—â–µ–º –ø–æ email —á–µ—Ä–µ–∑ CRUD
        found_by_email = get_user_by_email(db_session, email="crud@example.com")
        assert found_by_email is not None
        assert found_by_email.id == created_user.id
        print("‚úÖ CRUD: –ü–æ–∏—Å–∫ –ø–æ email —Ä–∞–±–æ—Ç–∞–µ—Ç")

        # –ò—â–µ–º –ø–æ ID —á–µ—Ä–µ–∑ CRUD
        found_by_id = get_user_by_id(db_session, user_id=created_user.id)
        assert found_by_id is not None
        assert found_by_id.email == created_user.email
        print("‚úÖ CRUD: –ü–æ–∏—Å–∫ –ø–æ ID —Ä–∞–±–æ—Ç–∞–µ—Ç")

    def test_crud_duplicate_prevention(self, db_session):
        """‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ CRUD"""
        print("üß™ –¢–µ—Å—Ç: CRUD - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

        from app.crud import create_user
        from app.schemas import UserCreate

        user_data = UserCreate(
            name="Duplicate Test",
            email="duplicate@example.com",
            bio="Test duplicate prevention"
        )

        # –ü–µ—Ä–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ
        user1 = create_user(db_session, user_data)
        assert user1 is not None

        # –í—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å —Ç–µ–º –∂–µ email - –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None
        user2 = create_user(db_session, user_data)
        assert user2 is None

        print("‚úÖ CRUD: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")


# üîÑ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –†–ê–ë–û–¢–´
def test_complete_user_workflow(client, db_session):
    """üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    print("üß™ –¢–µ—Å—Ç: –ü–æ–ª–Ω—ã–π workflow –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        "name": "Workflow User",
        "email": "workflow@example.com",
        "bio": "Testing complete workflow"
    }
    create_response = client.post("/users/", json=user_data)
    assert create_response.status_code == 201
    user_id = create_response.json()["id"]
    print("‚úÖ –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")

    # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    get_response = client.get(f"/users/{user_id}")
    assert get_response.status_code == 200
    assert get_response.json()["email"] == user_data["email"]
    print("‚úÖ –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ ID")

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
    list_response = client.get("/users/")
    assert list_response.status_code == 200
    users = list_response.json()
    user_emails = [user["email"] for user in users]
    assert user_data["email"] in user_emails
    print("‚úÖ –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ")

    # 4. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
    duplicate_response = client.post("/users/", json=user_data)
    assert duplicate_response.status_code == 400
    print("‚úÖ –®–∞–≥ 4: –î—É–±–ª–∏–∫–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

    print("üéâ –ü–æ–ª–Ω—ã–π workflow —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


